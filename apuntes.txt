React 16
-Los componentes del tipo clase dan mas potencialidades que los componentes del tipo funcion, en este 
tipo de componentes va existir al menos un metodo llamado render, esto es lo minimo que debe poseer
un componente para funcionar correctamente.
-Cada componente tiene direferentes de ciclo de vida que se pueden sobre escribir, algunso son muy
utilizados mientras que otros son solo utilizados en casos muy especificos.

Como se pueden comunicar los componentes
- burbujeo de acciones
  se pasan funciones entre componentes para estimular el cambio de estado del componente deseado
- mediante la url
  un componente podria alterar la url y el componente deseado puede estar reactivo al cambio de url
  no existe una comunicación directa entre componentes, pero el componente a genera un cambio en la
  url que el componente b puede escuchar.
- usando redux
  mediante el uso del estado de la aplicación

Fases del componente:
- Montaje:
  - constructor.
    es el primero en ser llamado por react, sucede antes de que se monete el componente, se debe
    utilizar solo en algunos casos especificos, por ejemplo, la inicialización del estado local 
    del componente
  - render.
    este es el unico metodo requerido, sirve para generar los elementos de react que van a ser
    generados en pantalla, esmuy importante que esta sea una función pura y no actualice o 
    modifique el estado de ninguna manera, debe de ser liviano, que solo se encargue de la 
    parte visual.
  - getDerivedStateFromProps. (react 16)
  - componentDidMount.
    es incovado luego de que el componente es insertado en el arbol de componentes del DOM, este es
    el punto ideal si se quiere realizar alguna petición al servidor, para que retorne datos que se
    quieran mostrar en el componente.
- Actualización:
  - render.
  - componentDidUpdate.
    es invocado inmediatamente despues de que ocurre la actualización, nos permite comparar los
    valores de las propiedades antes y despues de la actualización y realizar un petición al server
    en función de estos valores.
  - getDerivedStateFromProps. (react 16)
  - shouldComponentUpdate.
    no es uno de los metodos más comunes y se utiliza para lograr mejorar la eficiencia del componente
    pero solo debe utilizarce en casos muy particulares.
  - getSnapshotBeforeUpdate. (react 16)
- Desmontaje
  - componentWillUnmount
    aquí se pueden realizar tareas de limpieza, invalidar timers, cancelar peticiones al server o 
    eliminar alguna subcripción que se haya hecho en el componentDidMount.
Alternativamente:
- Manejo de errores
  Solo se ejecuta cuando sucede algun problema en el render del componente, o algun error en alguno
  de los metodos del ciclo de vida del mismo, o en el constructor de alguno de sus componentes hijos.

UNSAFE METHODS
- componentWillMount
- componentWillUpdate
- componentWillReciveProps

Estos metodos quedaran deprecados con react 17

¿que es lo que hace que un componente se actualice / re render?
- ejecución del setState.
- se establece un nuevo estado. 
- desde un componente padre se modifican las propiedades.
- se ejecuta el forceUpdate

Virtual DOM
El navrgador mantiene una representación de los elementros visuales que se mantienen en la pagina, esta
estructura se denomina Document Object Model (DOM)
Alterar el DOM real es una tarea costosa en tiempo y de porco rendimiento
Reat logra ser eficiente mediante la utilización del Virtual DOM, lo que quiere decir que mantiene en 
memoria una representación ligera de cada uno de los componentes generados y ante cada modificación
ejecuta una comparacion y determina los cambios que existieron e impacta solo los cambios finalmente
en el DOM real haciendo esto tan eficiente como pudiera ser

ONE WAY DATA FLOW
Se trata del flujo de datos dentro de la gerarquia de componentes de react prosee una unica dirección
en sentido desendente, desde los componentes padres hacia los componentes hijos, es por este motivo
que a este flujo de información se le conoce como ONE WAY DATA FLOW (Los componentes padres, pasan
propiedades los componentes hijos y su vez los hijos a sus hijos, los hijos nunca se comunican en
forma directa con los padres)

Proceso de reconciliación
Comparar dos arboles de componentes es una labor compleja para react, por eso se deben cumplir con
ciertos principios:
- Dos elementos o nodos de diferente tipo produciran arboles diferentes.
- Cuando existieran elementos hijos del mismo tipo, el desarrollador puede proveer una clave (key)
para indicar elementos permancen estables entre diferentes renderizaciones.
Quiere decir que el proceso o mecanismo de reconciliación tiene en cuenta los anteriores principios
para realizar la comparacion de los arboles de componentes y decidir en esa midida, cual es la
mejor manera de renderizar los cambios (si es que los hay)
es importante tener en cuenta que no se debe utilizar keys aleatorias o el número de indice ya 
que el rendimiento podria ser inferior al esperado y ocacionar algunos inconvenientes

En la versión 16 se realizo todo un nuevo refactor de React Fiber su motor de re renderizaciones

REDUX
Es una libreria JS para manejar el estado de la aplicación, un axioma en el que se basa redux:
- es que el estado es unico y global (store).
- el estado se modifica mediante acciones (actions)

- connect (react-redux)
es una funcion la cual me sirve para conectar a redux con react, es una funcion que recibe como 
parametro dos funciones y esta funcion retorna una funcion

- highOrderComponents
son funciones que toman como paramertro un componente y retornan otro con alguna mejorar o 
modificación, se utilizan mas que nada para solucionar aspectos transversales de la app

- mapDispatchToProps
sirve para mapear las acciones como propiedades en el componente

- Containers components
Son componentes que tienen acceso al estado de la aplicación con el connect, un container 
sera entonces un componente que tiene connect

- Presentational components
Estan con el objetivo de realizar un renderizado en la app, solamente contienen logica de 
presentacion

Cuanto más clara haga la división entre containers y Presentational components más claro me va a
querar el manejo de estado.
Tambien se recomienda que los componentes que se encuentren muy aninados no sean tratados como
containers.
Generar la cantidad minima e indispensable de containers  y no generar renderización en los mismos
(no UI).

- El estado de la aplicación se maneja por el store y los reducers

- Pure functions (reducers)
No debe interferir nada más en el contexto de la función, no alterar el estado, mejor, generar una
copia 

- Selectores (redux)
Es una estrategia/patron/herramiente que me permite hacer una selección de una parte del estado:
  - son eficientes debido a que no se ejecutan si ninguno de sus parametros se modifica.
  - permitén composicón, nuevos selectores pueden tomar como entrada otros selectores.
  - pueden minimizar el tamaño del store, ya que estos pueden crear datos procesados calculandolos
  en vez de tener que almacenarlos.
- Memoization en los selectores
técnica de optimización que permite mejorar la velocidad de ejecución guardando valores que son 
resultado de calculos (complejos) utiliza más memoria.